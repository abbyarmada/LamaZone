require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BooksController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BooksController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  # let(:book_params) { FactoryGirl.attributes_for(:book).stringify_keys }
  let(:book) { FactoryGirl.create :book }
  let(:customer) { FactoryGirl.create(:customer) }

  before do
    @request.env["devise.mapping"] = Devise.mappings[:customer]
    sign_in customer
  end

  describe "GET #index" do
    it "receives all on Book and returns all books" do
      expect(Book).to receive(:all).and_return [book]
      get :index
    end

    it "assigns all books as @books" do
      get :index
      expect(assigns(:books)).to eq [book]
    end
  end

  describe "GET #show" do
    it "assigns the requested book as @book" do
      get :show, {:id => book.to_param}
      expect(assigns(:book)).to eq(book)
    end

    it "receives set_book" do
    end
  end
end
